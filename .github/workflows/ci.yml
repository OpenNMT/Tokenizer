name: CI

on:
  push:
    branches:
      - master
    tags:
      - v*
  pull_request:
    branches:
      - master

jobs:
  build-and-test-cpp:
    name: Build and test C++ library on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest]

    steps:
      - uses: actions/checkout@v2
        with:
          submodules: recursive

      - name: Build and install
        if: startsWith(matrix.os, 'ubuntu')
        run: |
          cmake -DBUILD_TESTS=ON -DCMAKE_INSTALL_PREFIX=$PWD/install .
          make install

      - name: Build and install
        if: startsWith(matrix.os, 'macos')
        run: |
          cmake -DBUILD_TESTS=ON -DCMAKE_INSTALL_PREFIX=$PWD/install \
            -DICU_INCLUDE_DIR=/usr/local/opt/icu4c/include \
            -DICU_LIBRARY=/usr/local/opt/icu4c/lib/libicuuc.dylib .
          make install

      - name: Test
        run: |
          test/onmt_tokenizer_test test/data


  check-python-style:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v2

      - name: Set up Python 3.6
        uses: actions/setup-python@v2
        with:
          python-version: 3.6

      - name: Install dependencies
        run: |
          python -m pip install black==21.9b0 flake8==3.9.* isort==5.*

      - name: Check code format with Black
        working-directory: bindings/python
        run: |
          black --check .

      - name: Check imports order with isort
        working-directory: bindings/python
        run: |
          isort --check-only .

      - name: Check code style with Flake8
        working-directory: bindings/python
        if: ${{ always() }}
        run: |
          flake8 .


  build-and-test-python-wheels:
    name: Build and test wheels on ${{ matrix.os }} for ${{ matrix.arch }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-20.04, macos-10.15, windows-2019]
        arch: [auto64]
        include:
        - os: ubuntu-20.04
          arch: aarch64

    steps:
      - uses: actions/checkout@v2
        with:
          submodules: recursive

      - uses: docker/setup-qemu-action@v1
        if: ${{ matrix.arch == 'aarch64' }}
        name: Set up QEMU

      - name: Build wheels
        uses: pypa/cibuildwheel@v2.1.3
        with:
          package-dir: bindings/python
          output-dir: wheelhouse
        env:
          CIBW_ENVIRONMENT_WINDOWS: TOKENIZER_ROOT='${{ github.workspace }}\install'
          CIBW_BEFORE_ALL: bindings/python/tools/prepare_build_environment.sh
          CIBW_BEFORE_ALL_WINDOWS: bash bindings/python/tools/prepare_build_environment_windows.sh
          CIBW_BEFORE_BUILD: pip install pybind11==2.8.0
          CIBW_MANYLINUX_X86_64_IMAGE: manylinux2010
          CIBW_TEST_COMMAND: pytest {project}/bindings/python/test/test.py
          CIBW_TEST_REQUIRES: pytest
          CIBW_ARCHS: ${{ matrix.arch }}
          CIBW_SKIP: pp*

      - name: Upload Python wheels
        uses: actions/upload-artifact@v2
        with:
          name: python-wheels
          path: wheelhouse


  publish-python-wheels-on-pypi:
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags')
    needs: [build-and-test-cpp, build-and-test-python-wheels]
    runs-on: ubuntu-latest

    steps:
      - name: Download Python wheels
        uses: actions/download-artifact@v2
        with:
          name: python-wheels

      - name: Publish Python wheels to PyPI
        uses: pypa/gh-action-pypi-publish@master
        with:
          user: ${{ secrets.PYPI_USERNAME }}
          password: ${{ secrets.PYPI_PASSWORD }}
          packages_dir: .
